# -*- coding: utf-8 -*-
"""Sitrep_Salud_mes_es.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/129s5w4NTQBxpvNeHq80jw_v1Q6weEP8E

**AUTOMATIZACION DE UN SITREP MENSUAL PARA UN SECTOR Y MES/MESES**

Vamos a hacer el ejercicio de extracción de la información necesaria para poder completar los datos de un sitrep mensual de un sector (ej de salud). Para ello cargaremos las dos bases de datos utilizadas:

- 5W
- API_consolidated


Haremos los arreglos necesarios en las mismas:

- filtro por sector y periodo de interes


Y generaremos:

- Datos que nutran el informe
- Un nuevo excel con los datos preparados para la visualizacion.
"""

# Commented out IPython magic to ensure Python compatibility.
#Cargamos lo que vamos a utilizar 
import pandas as pd
import numpy as np
from datetime import datetime
import matplotlib.pyplot as plt
import seaborn as sb

# %matplotlib inline

#access drive
from google.colab import drive
drive.mount('/content/drive')

#cargar el documento 5w de octubre, en concreto la pestaña que nos convenga, ya que tienen varias. 
df_5w= pd.read_excel("/content/drive/Shareddrives/iMMAP PRM/DATOS/Activity Info/Bases Actualizables/5W_Colombia_-_RMRP_2022_Consolidado tres_25052022.xlsx")

#Cargamos las diferentes pestañas de los documentos de  API 

df_api_ind_mpio= pd.read_excel('/content/drive/Shareddrives/iMMAP PRM/DATOS/Activity Info/Bases Actualizables/API_Consolidado_ciclo_TRES_ GENERAL_27052022.xlsx', sheet_name="Indicador y Municipio")
df_api_mpio_sector= pd.read_excel("/content/drive/Shareddrives/iMMAP PRM/DATOS/Activity Info/Bases Actualizables/API_Consolidado_ciclo_TRES_ GENERAL_27052022.xlsx", sheet_name="Indicador y Sector")
df_api_sector_dpto= pd.read_excel('/content/drive/Shareddrives/iMMAP PRM/DATOS/Activity Info/Bases Actualizables/API_Consolidado_ciclo_TRES_ GENERAL_27052022.xlsx', sheet_name="Sector y Depto")
df_api_dpto_benf= pd.read_excel('/content/drive/Shareddrives/iMMAP PRM/DATOS/Activity Info/Bases Actualizables/API_Consolidado_ciclo_TRES_ GENERAL_27052022.xlsx', sheet_name="Max_Bene_Depa")

df_api_benf_intersector= pd.read_excel('/content/drive/Shareddrives/iMMAP PRM/DATOS/Activity Info/Bases Actualizables/API_Consolidado_ciclo_TRES_ GENERAL_27052022.xlsx', sheet_name="Bene_intersec")
df_api_sector_nac= pd.read_excel('/content/drive/Shareddrives/iMMAP PRM/DATOS/Activity Info/Bases Actualizables/API_Consolidado_ciclo_TRES_ GENERAL_27052022.xlsx', sheet_name="Sector Nacional")

df_api_rmrp=pd.read_excel('/content/drive/Shareddrives/iMMAP PRM/DATOS/Activity Info/Bases Actualizables/API_Consolidado_ciclo_TRES_ RMRP_27052022.xlsx', sheet_name='Indicador y Municipio')

df_api_covid= pd.read_excel('/content/drive/Shareddrives/iMMAP PRM/DATOS/Activity Info/Bases Actualizables/API_Consolidado_ciclo_TRES_ COVID_27052022.xlsx', sheet_name='Indicador y Municipio')

df_api_cash= pd.read_excel('/content/drive/Shareddrives/iMMAP PRM/DATOS/Activity Info/Bases Actualizables/API_Consolidado_ciclo_TRES_ CASH_RMRP_27052022.xlsx', sheet_name='Indicador y Municipio')

df_5w.head()

#saco el nombre de los meses: 


df_5w['Mes de atención'].unique()

mes = ['04_Abril']

#filtrar solo el sector salud y el mes que quiero analizar, y meterlo e una nueva variable, 
#con la que trabajaré apartir de ahora 
df_5w_sector_mes = df_5w[(df_5w['Sector']=='Salud')&(df_5w['Mes de atención']== '04_Abril')]


### si el informe es de varios meses, usar este codigo en lugar del de arriba, cambiando sector y meses selecionados: 
#df_5w_sector_mes= df_5w[(df_5w['_ Sector']=='Salud')&(df_5w['Mes de atención'].isin(['10_Octubre','09_Septiembre']))]

#filtrar solo el sector salud y el mes que quiero analizar, y meterlo e una nueva variable, 
#con la que trabajaré apartir de ahora en el API
df_api_sector_mes = df_api_ind_mpio[(df_api_ind_mpio['Sector']=='Salud')&(df_api_ind_mpio['Mesdeatención']=='04_Abril')]
df_api_ind_mpio = df_api_sector_mes

#Filtrar sector y meses en api general sec_nacional
api_sec_nac_sector_mes=df_api_sector_nac[(df_api_sector_nac['Sector']=='Salud')&(df_api_sector_nac['Mesdeatención']== '04_Abril')]

#filtrar solo el sector salud y el mes que quiero analizar, y meterlo e una nueva variable, 
#con la que trabajaré apartir de ahora 
df_api_rmrp_sector_mes = df_api_rmrp[(df_api_rmrp['Sector']=='Salud')&(df_api_rmrp['Mesdeatención']== '04_Abril')]

df_api_covid_sector_mes=df_api_covid[(df_api_covid['Sector']=='Salud')&(df_api_covid['Mesdeatención']== '04_Abril')]

df_api_cash_sector_mes=df_api_cash[(df_api_cash['Sector']=='Salud')&(df_api_cash['Mesdeatención']== '04_Abril')]

#saco el nombre de las columnas para próximas operaciones
df_5w_sector_mes.columns

df_api_sector_mes.columns

#obtengo el dato "Beneficiarios recibieron una o más asistencias por parte del SECTOR SALUD" solo los nuevos
benef_nuevos= df_api_sector_mes['bene_nuevos'].sum()
benef_nuevos

#obtengo el dato "Beneficiarios recibieron una o más asistencias por parte del SECTOR SALUD" todos, 
benef_mes=df_api_sector_mes['bene_mensuales'].sum()
benef_mes

#obtengo el dato: "xxx han sido beneficiados bajo EL PLAN RMRP 2021"
benef_rmrp=df_api_rmrp_sector_mes['bene_mensuales'].sum()
benef_rmrp

#Datos para la pregunta "xxxxx BENEFICIARIOS DE LA RESPUESTA POR LA EMERGENCIA SANITARIA DE COVID-19"
benef_covid=df_api_covid_sector_mes['bene_mensuales'].sum()
benef_covid

#DATO "BENEFICIARIOS DE LA RESPUESTA BAJO MODALIDAD DE TRANSFERENCIAS MONETARIAS" 

benef_cash=df_api_cash_sector_mes['bene_mensuales'].sum()
benef_cash

#definir el nro de Departamentos
no_dpto=df_api_ind_mpio['Departamento'].nunique()
no_dpto

#definir nro de Municipios alcanzados
df_api_ind_mpio["Full Name"] = df_api_ind_mpio['Departamento'] + " " +df_api_ind_mpio['Municipio'] 
no_mpio=df_api_ind_mpio['Full Name'].nunique()
no_mpio

#definir nro de organizaciones que reportaron

no_org=df_5w_sector_mes['Socio Principal Nombre'].nunique()
no_org

df_5w_sector_mes['Socio Implementador Nombre'].unique()

#definir nro de IMPLEMENTADORES
no_imple=df_5w_sector_mes['Socio Implementador Nombre'].nunique()
no_imple

# calcular el % de personas por edad y sexo
####ESTE DATO ES FIJO EN ALGUNOS SECTORES, QUITAR SI NO ES RELEVANTE###

bene_ninas18=api_sec_nac_sector_mes['bene_ninas18'].sum()
bene_ninas18

bene_Mujeres18=api_sec_nac_sector_mes['bene_Mujeres18'].sum()
bene_Mujeres18

bene_ninos18=api_sec_nac_sector_mes['bene_ninos18'].sum()
bene_ninos18

bene_Hombres18=api_sec_nac_sector_mes['bene_Hombres18'].sum()
bene_Hombres18

total_benef=bene_ninas18+bene_Mujeres18+bene_ninos18+bene_Hombres18
total_benef

porc_bene_ninas18=(bene_ninas18/total_benef)*100
porc_bene_ninas18=porc_bene_ninas18.round(decimals=2)
porc_bene_ninas18

porc_bene_Mujeres18=(bene_Mujeres18/total_benef)*100
porc_bene_Mujeres18=porc_bene_Mujeres18.round(decimals=2)
porc_bene_Mujeres18

porc_bene_ninos18=(bene_ninos18/total_benef)*100
porc_bene_ninos18=porc_bene_ninos18.round(decimals=2)
porc_bene_ninos18

porc_bene_Hombres18=(bene_Hombres18/total_benef)*100
porc_bene_Hombres18=porc_bene_Hombres18.round(decimals=2)
porc_bene_Hombres18

#obtener valores unicos para los indicadores, para luego poder sacar las cifras de personas atendidas por indicador

df_api_sector_mes['Indicador'].unique()

ind1=df_api_sector_mes.loc[df_api_sector_mes['Indicador'] == 'Número de refugiados y migrantes beneficiándose de consultas de atención primaria de salud', 'bene_mensuales'].sum()
ind1

ind2=df_api_sector_mes.loc[df_api_sector_mes['Indicador'] == 'Número de dosis de vacunas administradas a los refugiados y migrantes de Venezuela según ciclo de vida y calendario nacional', 'bene_mensuales'].sum()
ind2

ind3=df_api_sector_mes.loc[df_api_sector_mes['Indicador'] == 'Número de refugiados y migrantes de Venezuela que recibieron insumos', 'bene_mensuales'].sum()
ind3

#ind4=df_api_sector_mes.loc[df_api_sector_mes['Indicador'] == '# de refugiados y migrantes de Venezuela o comunidades de acogida asistidos con consultas de salud de emergencia, incluso sobre COVID-19, atención del parto y del recién nacido','bene_nuevos'].sum() 
#ind4

#### calculo del "financiamiento del sector reportado a xxx de MES de 2022"
#cargar el documento FTS ultima actulizacion
##(descargarlo de la pagina: https://fts.unocha.org/appeals/1021/flows,
### eliminar las 2 primeras filas para que los titulos de columna queden en fila 1 antes de subirlo
 
#fts= pd.read_excel('FTS_Refugee_and_Migrant_Response_Plan_for_Venezuela_2021_(RMRP)_flows_9ad4cbd6b1930edb03e6cd54aa5716fc_as_on_2022-02-08.xlsx', sheet_name='Export data')

#fts['Field Cluster'].unique()

#fts['Destination country'].unique()

#cargo la BD de FTS  quitando las dos primeras filas de cada una  
#DESCARGARLA DESDE WEB: https://fts.unocha.org/appeals/1021/projects
#FILTRAR POR PROJECT (PARA DATOS DE $ REQUERIDO solicitado), filtrat por colombia y claculo el Current requirements US$
#FILTRAT POR INDIVIDUAL FLOW (PARA DATOS DE GASTADO)

#filtro por sector y por pais: 

#fts_projects= pd.read_excel('FTS_Refugee_and_Migrant_Response_Plan_for_Venezuela_2021_(RMRP)_projects_2022-02-17.xlsx', sheet_name='Export data')
#fts_flow=pd.read_excel('FTS_Refugee_and_Migrant_Response_Plan_for_Venezuela_2021_(RMRP)_flows_2022-02-17.xlsx', sheet_name='Export data')
#fts_gasto= fts_flow[(fts_flow['Field Cluster']=='Health')&(fts_flow['Destination country']== 'Colombia')]

#fts_colomb =fts_projects[(fts_projects['Cluster']=='Health')& (fts_projects['Description'].str.contains('Colombia:',na=False))]
#fts_solicitado = fts_colomb['Current requirements US$'].sum()
#fts_solicitado

#sumatorio de la columna 'Amount (US$)'
#fts_finaciado= fts_gasto['Amount (US$)'].sum()
#fts_finaciado

#porce_financiado = (fts_finaciado/fts_solicitado)*100
#porce_financiado=porce_financiado.round(decimals=2)
#porce_financiado

#porce_no_financiado =((fts_solicitado-fts_finaciado)/fts_solicitado)*100
#porce_no_financiado=porce_no_financiado.round(decimals=2)
#porce_no_financiado

#datos para el RESUMEN DE LA RESPUESTA, 
## a peticion de salud: por actividades desde el 5w, por departamento, sacar el sumatorio de benef mensuales

df_5w_benef_actv_dpto= df_5w_sector_mes.groupby(['Indicador','Actividad Asociada','Admin Departamento'])['Total beneficiarios alcanzados durante el mes'].sum()
df_5w_benef_actv_dpto.head()

#calculo del nro de beneficiarios mensuales por actividades

df_5w_benef_actv= df_5w_sector_mes.groupby(['Indicador','Actividad Asociada'])['Total beneficiarios alcanzados durante el mes'].sum()
df_5w_benef_actv.head()

###### OPCIONAL busqueda por palabras clave dentro del nombre de la actividad que pone el socio
######### seleccionar las palabras clave segun el sector######

searchfor = ['kits', 'kits ']
df_kitshig = df_5w_sector_mes[df_5w_sector_mes['Nombre de la actividad'].str.contains('|'.join(searchfor))]
num_benf_kits_hig = df_kitshig['Total beneficiarios alcanzados durante el mes'].sum()
num_benf_kits_hig

#crear un nuevo dataframe con las variables calculadas, para introducir luego otra hoja de excel con ellas. 


cifras_clave= pd.DataFrame([{'Cifras':benef_nuevos, 'Indicador': 'Número de Beneficiarios recibieron una o más asistencias por parte del SECTOR SALUD-BENEFICIARIOS NUEVOS'},
                            {'Cifras':benef_mes, 'Indicador':'Número de Beneficiarios que recibieron una o más asistencias por parte del SECTOR SALUD- TODOS LOS BENEF DEL MES'}, 
                            {'Cifras': benef_rmrp, 'Indicador':'xxx han sido beneficiados bajo EL PLAN RMRP 2021'}, 
                            {'Cifras':benef_covid, 'Indicador':'xxxxx BENEFICIARIOS DE LA RESPUESTA POR LA EMERGENCIA SANITARIA DE COVID-19'},
                            {'Cifras':benef_cash, 'Indicador':'BENEFICIARIOS DE LA RESPUESTA BAJO MODALIDAD DE TRANSFERENCIAS MONETARIAS'}, 
                            {'Cifras':no_dpto, 'Indicador':'nro de Departamentos'},
                            {'Cifras':no_mpio, 'Indicador':'nro de Municipios alcanzados'},
                            {'Cifras':no_org, 'Indicador':'nro de organizaciones que reportaron'},
                            {'Cifras':no_imple, 'Indicador':'nro de implementadores'},
                            
                            {'Cifras':ind1, 'Indicador':'Número de refugiados y migrantes beneficiándose de consultas de atención primaria de salud'},
                            {'Cifras':ind2, 'Indicador':'Número de dosis de vacunas administradas a los refugiados y migrantes de Venezuela según ciclo de vida y calendario nacional'},
                            {'Cifras':ind3, 'Indicador':'Número de refugiados y migrantes de Venezuela que recibieron insumos'}, 
                            #{'Cifras':ind4, 'Indicador':'# de refugiados y migrantes de Venezuela o comunidades de acogida asistidos con consultas de salud de emergencia, incluso sobre COVID-19, atención del parto y del recién nacido'}, 
                            {'Cifras':porc_bene_ninas18, 'Indicador':'% Niñas'},
                            {'Cifras':porc_bene_Mujeres18, 'Indicador':'% Mujeres'},
                            {'Cifras':porc_bene_ninos18, 'Indicador':'% Niños'},
                            {'Cifras':porc_bene_Hombres18, 'Indicador':'% Hombres'},
                           ],
                            columns=['Cifras', 'Indicador'])

cifras_clave.head(20)

#crear un nuevo data frame para el FTS

#fts= pd.DataFrame([{'Indicador': '% monto finaciado a fecha de XXXXXXXX','Cifras':porce_financiado},
                  # {'Indicador': '% monto NO finaciado a fecha de XXXXXXXX','Cifras':porce_no_financiado},
                   #{'Indicador': 'Monto solicitado a fecha de XXXXXXXX','Cifras':fts_solicitado},
                   #{'Indicador': 'Monto gastado a fecha de XXXXXXXX','Cifras':fts_finaciado}],
                    #columns=['Indicador','Cifras'])

#fts.head()

#exportar en un excel los calculos realizados: 

#####cambiar el nomnbre del archivo excel de salida##########

writer= pd.ExcelWriter(r"/content/drive/Shareddrives/iMMAP PRM/DATOS/Activity Info/Salidas de la Automatizacion Sitrep/Salud_04.xlsx")


cifras_clave.to_excel(writer, sheet_name='Cifras Clave.xlsx')
df_5w_benef_actv_dpto.to_excel(writer, sheet_name='Benef_activ_Dpto.xlsx')
df_5w_benef_actv.to_excel(writer, sheet_name='Beneficiarios X activ.xlsx')
#fts.to_excel(writer, sheet_name='Seg Financiero')




writer.save()